#Calling_variants_rule
from Betsy.bie3 import *
import SignalFile_rule

FastqFile=DataType(
    'FastqFile',
    AttributeDef("read",['single','pair','pair1','pair2'],
                 "single","single",help='single or pair read'),
    AttributeDef("ref",['hg18','hg19','mm9','dm3'], "hg19","hg19",
                 help='ref species'),
    AttributeDef("contents",SignalFile_rule.CONTENTS,
                 'unspecified','unspecified',help="contents"),
    help="Fastq file"
    )
SaiFile=DataType(
    'SaiFile',
    AttributeDef("read",['single','pair','pair1','pair2'],
                 "single","single",help='single or pair read'),
    AttributeDef("ref",['hg18','hg19','mm9','dm3'],
                 "hg19","hg19",help='ref species'),
    AttributeDef("contents",SignalFile_rule.CONTENTS,
                 'unspecified','unspecified',help="contents"),
    help="Sai file"
    )

SamFile=DataType(
    'SamFile',
    AttributeDef("contents",SignalFile_rule.CONTENTS,
                 'unspecified','unspecified',
                 help="contents"),
    AttributeDef("sorted",["yes","no"],"no","no",
                 help='sorted or not'),
    AttributeDef("duplicates_marked",["yes","no"],"no","no",
                 help='mark duplicate or not'),
    AttributeDef("recalibration",["yes","no"],"no","no",
                 help='recalibration or not'),
    AttributeDef("has_header",["yes","no"],"no","no",
                 help='fix header or not'),
    AttributeDef("read",['single','pair'],
                 "single","single",
                 help='single or pair read'),
    AttributeDef("ref",['hg18','hg19','mm9','dm3'],
                 "hg19","hg19",
                 help='ref species'),
    help="Sam file"
    )
BamFile=DataType(
    'BamFile',
    AttributeDef("contents",SignalFile_rule.CONTENTS,
                 'unspecified','unspecified',
                 help="contents"),
    AttributeDef("sorted",["yes","no"],"no","no",
                 help='sorted or not'),
    AttributeDef("duplicates_marked",["yes","no"],"no","no",
                 help='mark duplicate or not'),
    AttributeDef("recalibration",["yes","no"],"no","no",
                 help='recalibration or not'),
    AttributeDef("has_header",["yes","no"],"no","no",
                 help='fix header or not'),
    AttributeDef("read",['single','pair'],
                 "single","single",
                 help='single or pair read'),
    AttributeDef("ref",['hg18','hg19','mm9','dm3'],
                 "hg19","hg19",
                 help='ref species'),
    help='Bam file'
    )
VcfFile=DataType(
    'VcfFile',
    AttributeDef("contents",SignalFile_rule.CONTENTS,
                 'unspecified','unspecified',
                 help="contents"),
    AttributeDef("recalibration",["yes","no"],"no","no",
                 help='recalibration or not'),
    AttributeDef("read",['single','pair'],
                 "single","single",
                 help='single or pair read'),
    AttributeDef("ref",['hg18','hg19','mm9','dm3'],
                 "hg19","hg19",
                 help='ref species'),
    AttributeDef("vcf_filter",['yes','no'], "no","no",
                 help='filter VcfFile or not'),
    AttributeDef("reheader",['standard','bcftool'],
                 "standard","standard",
                 help='method to convert to VcfFile'),
    AttributeDef("vcf_annotate",['yes','no'], "no","no",
                 help='annotate VcfFile or not'),
    help='Vcf file'
    )


list_files = [FastqFile, SaiFile, SamFile, BamFile, VcfFile]

all_modules = [
    Module(
        'align_sequence',
         FastqFile,SaiFile,
         Constraint("read",CAN_BE_ANY_OF,['single','pair1','pair2']),
         Constraint("ref",CAN_BE_ANY_OF,['hg18','hg19','mm9','dm3']),
         Constraint("contents",CAN_BE_ANY_OF,SignalFile_rule.CONTENTS),
         Consequence("read",SAME_AS_CONSTRAINT),
         Consequence("ref",SAME_AS_CONSTRAINT),
         Consequence("contents",SAME_AS_CONSTRAINT),
         help="algin sequence in FastqFile, generate SaiFile"
        ),
    Module(
        'generate_alignment_sam',
         [FastqFile,SaiFile], SamFile,
         Constraint("contents", CAN_BE_ANY_OF,SignalFile_rule.CONTENTS),
         Constraint("read", MUST_BE,'single'),
         Constraint("ref", CAN_BE_ANY_OF,['hg18','hg19','mm9','dm3']),
         Consequence("read",SAME_AS_CONSTRAINT),
         Consequence("ref", SAME_AS_CONSTRAINT),
         Consequence("contents", SAME_AS_CONSTRAINT),
         Consequence("sorted",SET_TO,'no'),
         Consequence("duplicates_marked",SET_TO,'no'),
         Consequence("recalibration",SET_TO,'no'),
         Consequence("has_header",SET_TO,'no'),
         help="generate algiment in SaiFile to SamFile"
         ),
    Module(
        'generate_alignment_sam_pair',
         [FastqFile,FastqFile,SaiFile,SaiFile], SamFile,
         
         Constraint("read", MUST_BE,'pair1',0),
         Constraint("read", MUST_BE,'pair2',1),
         Constraint("read", MUST_BE,'pair1',2),
         Constraint("read", MUST_BE,'pair2',3),
         Consequence("read",SET_TO,'pair'),
        
         Constraint("ref", CAN_BE_ANY_OF,['hg18','hg19','mm9','dm3'],0),
         Constraint("ref", SAME_AS,0,1),
         Constraint("ref", SAME_AS,0,2),
         Constraint("ref", SAME_AS,0,3),
         Consequence("ref", SAME_AS_CONSTRAINT,0),

         Constraint("contents", CAN_BE_ANY_OF,SignalFile_rule.CONTENTS,0),
         Constraint("contents", SAME_AS,0,1),
         Constraint("contents", SAME_AS,0,2),
         Constraint("contents", SAME_AS,0,3),
         Consequence("contents", SAME_AS_CONSTRAINT,0),
        
         Consequence("sorted",SET_TO,'no'),
         Consequence("duplicates_marked",SET_TO,'no'),
         Consequence("recalibration",SET_TO,'no'),
         Consequence("has_header",SET_TO,'no'),
         help="generate algiment in SaiFile to SamFile"
         ),
    Module(
        'sort_sam_file',
        SamFile,BamFile,
        Constraint("contents", CAN_BE_ANY_OF,SignalFile_rule.CONTENTS),
        Constraint("duplicates_marked",MUST_BE,'no'),
        Constraint("recalibration",MUST_BE,'no'),
        Constraint("has_header",MUST_BE,'no'),
        Constraint("sorted",MUST_BE,'no'),
        Consequence("sorted",SET_TO,'yes'),
        Consequence("contents", SAME_AS_CONSTRAINT),
        Consequence("has_header", SAME_AS_CONSTRAINT),
        Consequence("recalibration", SAME_AS_CONSTRAINT),
        Consequence("duplicates_marked", SAME_AS_CONSTRAINT),
        help="sort sam file and generate bam file "
        ),
     Module(
        'mark_duplicates',
        BamFile,BamFile,
        Constraint("contents", CAN_BE_ANY_OF,SignalFile_rule.CONTENTS),
        Constraint("duplicates_marked",MUST_BE,'no'),
        Constraint("recalibration",MUST_BE,'no'),
        Constraint("has_header",MUST_BE,'no'),
        Constraint("sorted", MUST_BE,'yes'),
        Consequence("sorted", SAME_AS_CONSTRAINT),
        Consequence("contents", SAME_AS_CONSTRAINT),
        Consequence("has_header", SAME_AS_CONSTRAINT),
        Consequence("recalibration", SAME_AS_CONSTRAINT),
        Consequence("duplicates_marked", SET_TO,'yes'),
        help="mark duplicates in SamFile"
        ),
    Module(
        'fix_header_GATK',
        BamFile,BamFile,
        Constraint("contents", CAN_BE_ANY_OF,SignalFile_rule.CONTENTS),
        Constraint("duplicates_marked",MUST_BE,'yes'),
        Constraint("recalibration",MUST_BE,'no'),
        Constraint("has_header",MUST_BE,'no'),
        Constraint("sorted", MUST_BE,'yes'),
        Consequence("sorted", SAME_AS_CONSTRAINT),
        Consequence("contents", SAME_AS_CONSTRAINT),
        Consequence("has_header", SET_TO,'yes'),
        Consequence("recalibration", SAME_AS_CONSTRAINT),
        Consequence("duplicates_marked", SAME_AS_CONSTRAINT),
        help="use GATK to fix header"
        ),
    Module(
        'base_quality_score_recalibration',
        BamFile,BamFile,
        Constraint("contents", CAN_BE_ANY_OF,SignalFile_rule.CONTENTS),
        Constraint("ref",CAN_BE_ANY_OF,['hg18','hg19']),
        Constraint("duplicates_marked",MUST_BE,'yes'),
        Constraint("recalibration",MUST_BE,'no'),
        Constraint("has_header",MUST_BE,'yes'),
        Constraint("sorted", MUST_BE,'yes'),
        Consequence("sorted", SAME_AS_CONSTRAINT),
        Consequence("contents", SAME_AS_CONSTRAINT),
        Consequence("has_header", SAME_AS_CONSTRAINT),
        Consequence("ref", SAME_AS_CONSTRAINT),
        Consequence("recalibration", SET_TO,'yes'),
        Consequence("duplicates_marked", SAME_AS_CONSTRAINT),
        help="recalibration sam file"
        ),
    Module(
        'call_variants_mpileup',
        BamFile,VcfFile,
        Constraint("contents", CAN_BE_ANY_OF,SignalFile_rule.CONTENTS),
        Constraint("sorted", MUST_BE,'yes'),
        Constraint("duplicates_marked",MUST_BE,'yes'),
        Constraint("has_header",MUST_BE,'yes'),
        Constraint("recalibration",CAN_BE_ANY_OF,['yes','no']),
        Consequence("contents", SAME_AS_CONSTRAINT),
        Consequence("vcf_filter",SET_TO, "no"),
        Consequence("reheader",SET_TO, "bcftool"),
        Consequence("vcf_annotate",SET_TO, "no"),
        Consequence("recalibration", SAME_AS_CONSTRAINT),
        help="use mpileup to call variants"),
    Module(
        'filter_vcf_file',
        VcfFile,VcfFile,
        Constraint("contents", CAN_BE_ANY_OF,SignalFile_rule.CONTENTS),
        Constraint("recalibration",CAN_BE_ANY_OF,['yes','no']),
        Constraint("vcf_annotate",MUST_BE,'no'),
        Constraint("vcf_filter",MUST_BE,'no'),
        Constraint("reheader",MUST_BE,"bcftool"),
        Consequence("contents", SAME_AS_CONSTRAINT),
        Consequence("vcf_filter",SET_TO,'yes'),
        Consequence("reheader",SAME_AS_CONSTRAINT),
        Consequence("vcf_annotate",SAME_AS_CONSTRAINT),
        Consequence("recalibration", SAME_AS_CONSTRAINT),
        help="filter vcf file"),
    Module(
        'call_variants_GATK',
        BamFile,VcfFile,
        Constraint("contents", CAN_BE_ANY_OF,SignalFile_rule.CONTENTS),
        Constraint("sorted", MUST_BE,'yes'),
        Constraint("duplicates_marked",MUST_BE,'yes'),
        Constraint("has_header",MUST_BE,'yes'),
        Constraint("recalibration",CAN_BE_ANY_OF,['yes','no']),
        Consequence("contents", SAME_AS_CONSTRAINT),
        Consequence("vcf_filter",SET_TO, "yes"),
        Consequence("reheader",SET_TO, "standard"),
        Consequence("vcf_annotate",SET_TO, "no"),
        Consequence("recalibration", SAME_AS_CONSTRAINT),
        help="use GATK to call variants"),
    Module(
        'annotate_vcf_file',
        VcfFile,VcfFile,
        Constraint("contents", CAN_BE_ANY_OF,SignalFile_rule.CONTENTS),
        Constraint("recalibration",CAN_BE_ANY_OF,['yes','no']),
        Constraint("vcf_annotate",MUST_BE,'no'),
        Constraint("vcf_filter",MUST_BE,'yes'),
        Constraint("reheader",CAN_BE_ANY_OF,["bcftool",'standard']),
        Consequence("contents", SAME_AS_CONSTRAINT),
        Consequence("vcf_filter",SAME_AS_CONSTRAINT),
        Consequence("reheader",SAME_AS_CONSTRAINT),
        Consequence("vcf_annotate",SET_TO,'yes'),
        Consequence("recalibration", SAME_AS_CONSTRAINT),
        help="annotate vcf file"),
    ]
