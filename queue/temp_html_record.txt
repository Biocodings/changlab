<!--<h2>Please upload your files for Betsy</h2>
{{for i in range(6):}}
    {{filename='file'+str(i)}}
    {{=filename}}
    <select name="{{=filename}}"/>
		{{for h in INPUTS:}}<option value="{{=h}}">{{=h}}</option>{{pass}}
	</select>
    <input type="file" id="{{=filename}}" class="upload" name="{{=filename+'_path'}}" uploadfolder="/home/xchen/chencode/upload/"/><br/>
{{pass}}

<form method="get" action="{{=URL('submit_job')}}"> 
<input type="submit" value="submit" />
<table width="100%">
<tr><td><td><td>

</td><td><td><td>

<h3>common parameters:</h3>
{{for i in common_parameters:}}
	{{=i}}
	{{if isinstance(common_parameters[i],list):}}
    	<select name="{{=i}}"/>
   		{{for h in common_parameters[i]:}}<option value="{{=h}}">{{=h}}</option>{{pass}}
		</select>
	{{else:}}	
		<input type="input" value="{{=common_parameters[i][1]}}" name="{{=i}}"  id="{{=i}}"/>
	{{pass}}
{{pass}}
</td></td><td><td>
<h3>normalize parameters:</h3>
{{for i in normalize_parameters:}}
	{{=i}}

	<select name="{{=i}}"/>
   {{for h in normalize_parameters[i]:}}<option value="{{=h}}">{{=h}}</option>{{pass}}
	</select>

{{pass}}
</td></td></td><td>
<h3>optional parameters</h3>
{{for i in optional_parameters:}}
	<!--{{=i}}
	{{if isinstance(optional_parameters[i],list):}}
	
		<select name="{{=i}}"/>
   		{{for h in optional_parameters[i]:}}<option value="{{=h}}">{{=h}}</option>{{pass}}
		</select>
	
	{{else:}}
<input type="input" value="{{=optional_parameters[i][1]}}" name="{{=i}}" id="{{=i}}"/>
	{{pass}}
{{pass}}
<!--</td></tr></tr></tr>
</table>
</form>
{{=form}}
{{=form_queue}}-->


    

def normalize_file1():
    form = SQLFORM.factory(
        Field('myfile1',requires=IS_IN_SET(INPUTS)),
        Field('myfile1_path', 'upload',
        uploadfolder=upload_path),
        Field('myfile2',requires=IS_IN_SET(INPUTS)),
        Field('myfile2_path', 'upload',
        uploadfolder=upload_path),
        Field('myfile3',requires=IS_IN_SET(INPUTS)),
        Field('myfile3_path', 'upload',
        uploadfolder=upload_path),
        Field('myfile4',requires=IS_IN_SET(INPUTS)),
        Field('myfile4_path', 'upload',
        uploadfolder=upload_path),
        Field('myfile5',requires=IS_IN_SET(INPUTS)),
        Field('myfile5_path', 'upload',
        uploadfolder=upload_path),
        Field('myfile6',requires=IS_IN_SET(INPUTS)),
        Field('myfile6_path', 'upload',
        uploadfolder=upload_path),submit_button='upload files'
        )
    form_queue = FORM(INPUT(_type='submit',_value='show jobs status'))
    if form.process().accepted:
        session.myfile1 = form.vars.myfile1
        session.myfile2 = form.vars.myfile2
        session.myfile3 = form.vars.myfile3
        session.myfile4 = form.vars.myfile4
        session.myfile5 = form.vars.myfile5
        session.myfile6 = form.vars.myfile6
        session.protocol = 'normalize_file'
        #print form.vars.getlist()
        
           
        #print request.vars
    #    redirect(URL('submit_job'))
    if form_queue.process().accepted:
        redirect(URL('show_status'))
    return dict(form=form,form_queue=form_queue)


def heatmap():
    form = SQLFORM.factory(Field('command',requires=IS_NOT_EMPTY()),
        Field('myfile1', 'upload',
        uploadfolder=upload_path),
        Field('myfile2', 'upload',
        uploadfolder=upload_path),
        Field('myfile3', 'upload',
        uploadfolder=upload_path),
        Field('myfile4', 'upload',
        uploadfolder=upload_path),
        Field('myfile5', 'upload',
        uploadfolder=upload_path),
        Field('myfile6', 'upload',
        uploadfolder=upload_path),
        )
    form_queue = FORM(INPUT(_type='submit',_value='show jobs status'))
    if form.process().accepted:
        session.command=form.vars.command
        session.myfile1 = form.vars.myfile1
        session.myfile2 = form.vars.myfile2
        session.myfile3 = form.vars.myfile3
        session.myfile4 = form.vars.myfile4
        session.myfile5 = form.vars.myfile5
        session.myfile6 = form.vars.myfile6
        session.protocol = 'make_heatmap'
        redirect(URL('submit_job'))
    if form_queue.process().accepted:
        redirect(URL('show_status'))
    return dict(form=form,form_queue=form_queue)


<td><input type="submit" value="delete" href="{=URL('delete_job',args=row.Jobname)}}"/></td><br/>