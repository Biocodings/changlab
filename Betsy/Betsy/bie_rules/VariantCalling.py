#Calling_variants_rule
from Betsy.bie3 import *
import BasicDataTypesNGS
import Database
all_modules = [
    Module('align_sequence', BasicDataTypesNGS.FastqFile,
           BasicDataTypesNGS.SaiFile,
           Constraint("read", CAN_BE_ANY_OF, ['single', 'pair1', 'pair2']),
           Constraint("ref", CAN_BE_ANY_OF, ['hg18', 'hg19', 'mm9', 'dm3']),
           Constraint("contents", CAN_BE_ANY_OF, Database.CONTENTS),
           Consequence("read", SAME_AS_CONSTRAINT),
           Consequence("ref", SAME_AS_CONSTRAINT),
           Consequence("contents", SAME_AS_CONSTRAINT),
           help="algin sequence in FastqFile, generate SaiFile"),
    Module('generate_alignment_sam', [BasicDataTypesNGS.FastqFile,
                                      BasicDataTypesNGS.SaiFile],
           BasicDataTypesNGS.SamFile,
           Constraint("contents", CAN_BE_ANY_OF, Database.CONTENTS),
           Constraint("read", MUST_BE, 'single'),
           Constraint("ref", CAN_BE_ANY_OF, ['hg18', 'hg19', 'mm9', 'dm3']),
           Consequence("read", SAME_AS_CONSTRAINT),
           Consequence("ref", SAME_AS_CONSTRAINT),
           Consequence("contents", SAME_AS_CONSTRAINT),
           Consequence("sorted", SET_TO, 'no'),
           Consequence("duplicates_marked", SET_TO, 'no'),
           Consequence("recalibration", SET_TO, 'no'),
           Consequence("has_header", SET_TO, 'no'),
           help="generate algiment in SaiFile to SamFile"),
    Module('generate_alignment_sam_pair',
           [BasicDataTypesNGS.FastqFile, BasicDataTypesNGS.FastqFile,
            BasicDataTypesNGS.SaiFile, BasicDataTypesNGS.SaiFile],
           BasicDataTypesNGS.SamFile, Constraint("read", MUST_BE, 'pair1', 0),
           Constraint("read", MUST_BE, 'pair2', 1),
           Constraint("read", MUST_BE, 'pair1', 2),
           Constraint("read", MUST_BE, 'pair2', 3),
           Consequence("read", SET_TO, 'pair'),
           Constraint("ref", CAN_BE_ANY_OF, ['hg18', 'hg19', 'mm9', 'dm3'], 0),
           Constraint("ref", SAME_AS, 0, 1), Constraint("ref", SAME_AS, 0, 2),
           Constraint("ref", SAME_AS, 0, 3),
           Consequence("ref", SAME_AS_CONSTRAINT, 0),
           Constraint("contents", CAN_BE_ANY_OF, Database.CONTENTS, 0),
           Constraint("contents", SAME_AS, 0, 1),
           Constraint("contents", SAME_AS, 0, 2),
           Constraint("contents", SAME_AS, 0, 3),
           Consequence("contents", SAME_AS_CONSTRAINT, 0),
           Consequence("sorted", SET_TO,
                       'no'), Consequence("duplicates_marked", SET_TO, 'no'),
           Consequence("recalibration", SET_TO,
                       'no'), Consequence("has_header", SET_TO, 'no'),
           help="generate algiment in SaiFile to SamFile"),
    Module('sort_sam_file', BasicDataTypesNGS.SamFile,
           BasicDataTypesNGS.BamFile,
           Constraint("contents", CAN_BE_ANY_OF, Database.CONTENTS),
           Constraint("duplicates_marked", MUST_BE, 'no'),
           Constraint("recalibration", MUST_BE, 'no'),
           Constraint("has_header", MUST_BE, 'no'),
           Constraint("sorted", MUST_BE, 'no'),
           Consequence("sorted", SET_TO, 'yes'),
           Consequence("contents", SAME_AS_CONSTRAINT),
           Consequence("has_header", SAME_AS_CONSTRAINT),
           Consequence("recalibration", SAME_AS_CONSTRAINT),
           Consequence("duplicates_marked", SAME_AS_CONSTRAINT),
           help="sort sam file and generate bam file "),
    Module('mark_duplicates', BasicDataTypesNGS.BamFile,
           BasicDataTypesNGS.BamFile,
           Constraint("contents", CAN_BE_ANY_OF, Database.CONTENTS),
           Constraint("duplicates_marked", MUST_BE, 'no'),
           Constraint("recalibration", MUST_BE, 'no'),
           Constraint("has_header", MUST_BE, 'no'),
           Constraint("sorted", MUST_BE, 'yes'),
           Consequence("sorted", SAME_AS_CONSTRAINT),
           Consequence("contents", SAME_AS_CONSTRAINT),
           Consequence("has_header", SAME_AS_CONSTRAINT),
           Consequence("recalibration", SAME_AS_CONSTRAINT),
           Consequence("duplicates_marked", SET_TO, 'yes'),
           help="mark duplicates in SamFile"),
    Module('fix_header_GATK', BasicDataTypesNGS.BamFile,
           BasicDataTypesNGS.BamFile,
           Constraint("contents", CAN_BE_ANY_OF, Database.CONTENTS),
           Constraint("duplicates_marked", MUST_BE, 'yes'),
           Constraint("recalibration", MUST_BE, 'no'),
           Constraint("has_header", MUST_BE, 'no'),
           Constraint("sorted", MUST_BE, 'yes'),
           Consequence("sorted", SAME_AS_CONSTRAINT),
           Consequence("contents", SAME_AS_CONSTRAINT),
           Consequence("has_header", SET_TO, 'yes'),
           Consequence("recalibration", SAME_AS_CONSTRAINT),
           Consequence("duplicates_marked", SAME_AS_CONSTRAINT),
           help="use GATK to fix header"),
    Module('recalibrate_base_quality_score', BasicDataTypesNGS.BamFile,
           BasicDataTypesNGS.BamFile,
           Constraint("contents", CAN_BE_ANY_OF, Database.CONTENTS),
           Constraint("ref", CAN_BE_ANY_OF, ['hg18', 'hg19']),
           Constraint("duplicates_marked", MUST_BE, 'yes'),
           Constraint("recalibration", MUST_BE, 'no'),
           Constraint("has_header", MUST_BE, 'yes'),
           Constraint("sorted", MUST_BE, 'yes'),
           Consequence("sorted", SAME_AS_CONSTRAINT),
           Consequence("contents", SAME_AS_CONSTRAINT),
           Consequence("has_header", SAME_AS_CONSTRAINT),
           Consequence("ref", SAME_AS_CONSTRAINT),
           Consequence("recalibration", SET_TO, 'yes'),
           Consequence("duplicates_marked", SAME_AS_CONSTRAINT),
           help="recalibration sam file"),
    Module('call_variants_mpileup', BasicDataTypesNGS.BamFile,
           BasicDataTypesNGS.VcfFile,
           Constraint("contents", CAN_BE_ANY_OF, Database.CONTENTS),
           Constraint("sorted", MUST_BE, 'yes'),
           Constraint("duplicates_marked", MUST_BE, 'yes'),
           Constraint("has_header", MUST_BE, 'yes'),
           Constraint("recalibration", CAN_BE_ANY_OF, ['yes', 'no']),
           Consequence("contents", SAME_AS_CONSTRAINT),
           Consequence("vcf_filter", SET_TO, "no"),
           Consequence("reheader", SET_TO, "bcftool"),
           Consequence("vcf_annotate", SET_TO, "no"),
           Consequence("recalibration", SAME_AS_CONSTRAINT),
           help="use mpileup to call variants"),
    Module('filter_vcf_file', BasicDataTypesNGS.VcfFile,
           BasicDataTypesNGS.VcfFile,
           Constraint("contents", CAN_BE_ANY_OF, Database.CONTENTS),
           Constraint("recalibration", CAN_BE_ANY_OF, ['yes', 'no']),
           Constraint("vcf_annotate", MUST_BE, 'no'),
           Constraint("vcf_filter", MUST_BE, 'no'),
           Constraint("reheader", MUST_BE, "bcftool"),
           Consequence("contents", SAME_AS_CONSTRAINT),
           Consequence("vcf_filter", SET_TO, 'yes'),
           Consequence("reheader", SAME_AS_CONSTRAINT),
           Consequence("vcf_annotate", SAME_AS_CONSTRAINT),
           Consequence("recalibration", SAME_AS_CONSTRAINT),
           help="filter vcf file"),
    Module('call_variants_GATK', BasicDataTypesNGS.BamFile,
           BasicDataTypesNGS.VcfFile,
           Constraint("contents", CAN_BE_ANY_OF, Database.CONTENTS),
           Constraint("sorted", MUST_BE, 'yes'),
           Constraint("duplicates_marked", MUST_BE, 'yes'),
           Constraint("has_header", MUST_BE, 'yes'),
           Constraint("recalibration", CAN_BE_ANY_OF, ['yes', 'no']),
           Consequence("contents", SAME_AS_CONSTRAINT),
           Consequence("vcf_filter", SET_TO, "yes"),
           Consequence("reheader", SET_TO, "standard"),
           Consequence("vcf_annotate", SET_TO, "no"),
           Consequence("recalibration", SAME_AS_CONSTRAINT),
           help="use GATK to call variants"),
    Module('annotate_vcf_file', BasicDataTypesNGS.VcfFile,
           BasicDataTypesNGS.VcfFile,
           Constraint("contents", CAN_BE_ANY_OF, Database.CONTENTS),
           Constraint("recalibration", CAN_BE_ANY_OF, ['yes', 'no']),
           Constraint("vcf_annotate", MUST_BE, 'no'),
           Constraint("vcf_filter", MUST_BE, 'yes'),
           Constraint("reheader", CAN_BE_ANY_OF, ["bcftool", 'standard']),
           Consequence("contents", SAME_AS_CONSTRAINT),
           Consequence("vcf_filter", SAME_AS_CONSTRAINT),
           Consequence("reheader", SAME_AS_CONSTRAINT),
           Consequence("vcf_annotate", SET_TO, 'yes'),
           Consequence("recalibration", SAME_AS_CONSTRAINT),
           help="annotate vcf file"),
    Module('is_Bam_folder_sorted', BasicDataTypesNGS.BamFolder,
           BasicDataTypesNGS.BamFolder,
           Constraint("contents", CAN_BE_ANY_OF, Database.CONTENTS),
           Constraint("ref", CAN_BE_ANY_OF, ['hg18', 'hg19']),
           Constraint("duplicates_marked", MUST_BE, 'no'),
           Constraint("indexed", MUST_BE, 'no'),
           Constraint("sorted", MUST_BE, 'unknown'),
           Constraint("sample_type", MUST_BE, 'RNA'),
           Consequence("contents", SAME_AS_CONSTRAINT),
           Consequence("ref", SAME_AS_CONSTRAINT),
           Consequence("duplicates_marked", SAME_AS_CONSTRAINT),
           Consequence("indexed", SAME_AS_CONSTRAINT),
           Consequence("sorted", BASED_ON_DATA, ['yes', 'no']),
           Consequence("sample_type", SAME_AS_CONSTRAINT),
           help="check bam folder sorted or not"),
    Module('sort_bam_folder', BasicDataTypesNGS.BamFolder,
           BasicDataTypesNGS.BamFolder,
           Constraint("contents", CAN_BE_ANY_OF, Database.CONTENTS),
           Constraint("ref", CAN_BE_ANY_OF, ['hg18', 'hg19']),
           Constraint("duplicates_marked", MUST_BE, 'no'),
           Constraint("indexed", MUST_BE, 'no'),
           Constraint("sorted", MUST_BE, 'no'),
           Constraint("sample_type", MUST_BE, 'RNA'),
           Consequence("contents", SAME_AS_CONSTRAINT),
           Consequence("ref", SAME_AS_CONSTRAINT),
           Consequence("duplicates_marked", SAME_AS_CONSTRAINT),
           Consequence("indexed", SAME_AS_CONSTRAINT),
           Consequence("sorted", SET_TO, 'yes'),
           Consequence("sample_type", SAME_AS_CONSTRAINT),
           help="sort bam folder"),
    Module('flag_dups_in_bam_folder', BasicDataTypesNGS.BamFolder,
           BasicDataTypesNGS.BamFolder,
           Constraint("contents", CAN_BE_ANY_OF, Database.CONTENTS),
           Constraint("ref", CAN_BE_ANY_OF, ['hg18', 'hg19']),
           Constraint("duplicates_marked", MUST_BE, 'no'),
           Constraint("indexed", MUST_BE, 'no'),
           Constraint("sorted", MUST_BE, 'yes'),
           Constraint("sample_type", MUST_BE, 'RNA'),
           Consequence("contents", SAME_AS_CONSTRAINT),
           Consequence("ref", SAME_AS_CONSTRAINT),
           Consequence("duplicates_marked", SET_TO, 'yes'),
           Consequence("indexed", SAME_AS_CONSTRAINT),
           Consequence("sorted", SAME_AS_CONSTRAINT),
           Consequence("sample_type", SAME_AS_CONSTRAINT),
           help="mark duplicates in bam folder"),
    Module('index_bam_folder', BasicDataTypesNGS.BamFolder,
           BasicDataTypesNGS.BamFolder,
           Constraint("contents", CAN_BE_ANY_OF, Database.CONTENTS),
           Constraint("ref", CAN_BE_ANY_OF, ['hg18', 'hg19']),
           Constraint("duplicates_marked", MUST_BE, 'yes'),
           Constraint("indexed", MUST_BE, 'no'),
           Constraint("sorted", MUST_BE, 'yes'),
           Constraint("sample_type", MUST_BE, 'RNA'),
           Consequence("contents", SAME_AS_CONSTRAINT),
           Consequence("ref", SAME_AS_CONSTRAINT),
           Consequence("duplicates_marked", SAME_AS_CONSTRAINT),
           Consequence("indexed", SET_TO, 'yes'),
           Consequence("sorted", SAME_AS_CONSTRAINT),
           Consequence("sample_type", SAME_AS_CONSTRAINT),
           help="index bam folder"),
    Module('run_RNA_SeQC', BasicDataTypesNGS.BamFolder,
           BasicDataTypesNGS.RNASeQCFile,
           OptionDef("RNA_ref",
                     help="ref file for RNA_SeQC"),
           OptionDef("RNA_gtf",
                     help="gtf file for RNA_SeQC"),
           Constraint("contents", CAN_BE_ANY_OF, Database.CONTENTS),
           Constraint("ref", CAN_BE_ANY_OF, ['hg18', 'hg19']),
           Constraint("duplicates_marked", MUST_BE, 'yes'),
           Constraint("indexed", MUST_BE, 'yes'),
           Constraint("sorted", MUST_BE, 'yes'),
           Constraint("sample_type", MUST_BE, 'RNA'),
           Consequence("contents", SAME_AS_CONSTRAINT),
           help="run RNA-SeQC"),
]
list_files = []
