# TODO: Make a constant for ["yes", "no"]

# DataTypes:
# VCFFolder
# VCFRecalibrationReport
# AnnotatedVCFFolder
# MultiVCFFile
# AnnotatedMultiVCFFile
#
# BackfillMultiVCFFile
#
# PileupSummary
# PositionsFile
#
# Modules:
# summarize_variants_mpileup
# call_variants_mpileup        # not implemented
# call_variants_GATK
# make_vcf_recalibration_report_snp
# recalibrate_variants_snp
# call_variants_platypus
# call_variants_varscan        # not fully implemented
#
# filter_snps_only_multivcf
# annotate_with_annovar
#
# 
# Recalibrate variant scores with GATK.
# https://www.broadinstitute.org/gatk/guide/article?id=2805
    

from Betsy.bie3 import *
import BasicDataTypes as BDT
import BasicDataTypesNGS as NGS

CALLERS = ["none", "mpileup", "gatk", "platypus", "varscan"]
VARTYPES = ["all", "snp", "indel", "consensus"]
VARTYPE_NOT_CONSENSUS = [x for x in VARTYPES if x != "consensus"]

## BCFFolder = DataType(
##     "BCFFolder",
##     AttributeDef(
##         "contents", BDT.CONTENTS,
##         "unspecified", "unspecified", help="contents"),
##     AttributeDef(
##         "vartype", ["both", "snp", "indel"], "both", "snp",
##         help="What kind of variants are held in this file."),
##     AttributeDef(
##         "get_coverage", ["no", "yes"], "no", "no",
##         help="Whether the purpose is to get depth of coverage."),
##     help="Folder of .bcf files generated by samtools mpileup.",
##     )


VCFFolder = DataType(
    "VCFFolder",
    AttributeDef(
        "contents", BDT.CONTENTS, "unspecified", "unspecified",
        help="contents"),
    AttributeDef(
        "caller", CALLERS, "none", "mpileup",
        help="Which variant caller was used."),

    #AttributeDef(
    #    "mpileup_summary", ["no", "yes"], "no", "no",
    #    help="Whether this is just summary information from mpileup."),
    AttributeDef(
        "vartype", VARTYPES, "snp", "snp",
        help="What kind of variants are held in this file."),
    AttributeDef(
        "vcf_recalibrated", ["no", "yes"], "no", "no",
        help="Whether quality scores are ready for filtering."),
    )

VCFRecalibrationReport = DataType(
    "VCFRecalibrationReport",
    AttributeDef(
        "vartype", VARTYPES, "snp", "snp",
        help="What kind of variants are held in this file."),
    AttributeDef(
        "caller", CALLERS, "none", "mpileup",
        help="Which variant caller was used."),
    )

AnnotatedVCFFolder = DataType(
    "AnnotatedVCFFolder",
    )

MultiVCFFile = DataType(
    "MultiVCFFile",
    # Headers are:
    # #CHROM POS ID REF ALT QUAL FILTER INFO FORMAT [Samples...]
    AttributeDef(
        "contents", BDT.CONTENTS, "unspecified", "unspecified",
        help="contents"),
    AttributeDef(
        "caller", CALLERS, "none", "mpileup",
        help="Which variant caller was used."),
    AttributeDef(
        "vartype", VARTYPES, "snp", "snp",
        help="What kind of variants are held in this file."),
    AttributeDef(
        "backfilled", ["no", "yes"], "no", "no",
        help="Whether the mutations are backfilled."),
    )

AnnotatedMultiVCFFile = DataType(
    "AnnotatedMultiVCFFile",
    AttributeDef(
        "backfilled", ["no", "yes"], "no", "no",
        help="Whether the mutations are backfilled."),
    )

PileupSummary = DataType(
    "PileupSummary",
    AttributeDef(
        "contents", BDT.CONTENTS, "unspecified", "unspecified",
        help="contents"),
    AttributeDef(
        "vartype", VARTYPES, "snp", "snp",
        help="What kind of variants are held in this file."),
    )

# For samtools.  Two columns (no header):
# <chrom>  <pos 0-based>  
PositionsFile = DataType(
    "PositionsFile",
    AttributeDef(
        "vartype", VARTYPES, "snp", "snp",
        help="What kind of variants are held in this file."),
    )


all_data_types=[
    VCFFolder,
    VCFRecalibrationReport,
    AnnotatedVCFFolder,
    MultiVCFFile,
    AnnotatedMultiVCFFile,
    
    PileupSummary,
    PositionsFile,
    ]

all_modules = [
    ModuleNode(
        "backfill_variants_mpileup",
        [NGS.BamFolder, NGS.ReferenceGenome, PositionsFile], PileupSummary,
        Constraint("sorted", MUST_BE, "coordinate", 0),
        Constraint("duplicates_marked", MUST_BE, "yes", 0),
        Constraint("has_read_groups", MUST_BE, "yes"),
        Constraint("samtools_indexed", MUST_BE, "yes", 1),
        Constraint("indexed", CAN_BE_ANY_OF, ["no", "yes"], 0),

        Constraint("contents", CAN_BE_ANY_OF, BDT.CONTENTS),
        Consequence("contents", SAME_AS_CONSTRAINT),
        #Consequence("caller", SET_TO, "mpileup"),
        #Consequence("mpileup_summary", SET_TO, "yes"),
        #Consequence("vartype", SET_TO_ONE_OF, ["all", "consensus"]),
        Constraint("vartype", CAN_BE_ANY_OF, VARTYPE_NOT_CONSENSUS, 2),
        Consequence("vartype", SET_TO, "consensus"),

        help="Use mpileup to call variants"),
    ModuleNode(
        "call_variants_GATK",
        [NGS.BamFolder, NGS.ReferenceGenome], VCFFolder,
        
        # Pipeline: read groups -> sort -> mark dups -> realign ->
        # recalibrate -> call variants
        Constraint("contents", CAN_BE_ANY_OF, BDT.CONTENTS, 0),
        Consequence("contents", SAME_AS_CONSTRAINT),
        Constraint("sorted", MUST_BE, "coordinate", 0),
        Constraint("has_read_groups", MUST_BE, "yes", 0),
        Constraint("duplicates_marked", MUST_BE, "yes", 0),
        Constraint("indel_realigned", MUST_BE, "yes", 0),
        Constraint("base_recalibrated", CAN_BE_ANY_OF, ["no", "yes"], 0),
        Constraint("dict_added", MUST_BE, "yes", 1),
        Constraint("samtools_indexed", MUST_BE, "yes", 1),
        
        Consequence("caller", SET_TO, "gatk"),
        Consequence("vcf_recalibrated", SET_TO, "no"),
        Consequence("vartype", SET_TO, "all"),
        help="Use GATK HaplotypeCaller to call variants."),
    ModuleNode(
        "call_variants_platypus",
        [NGS.BamFolder, NGS.ReferenceGenome], VCFFolder,
        
        Constraint("contents", CAN_BE_ANY_OF, BDT.CONTENTS, 0),
        Consequence("contents", SAME_AS_CONSTRAINT),
        Constraint("sorted", MUST_BE, "coordinate", 0),
        Constraint("indexed", MUST_BE, "yes", 0),
        Constraint("duplicates_marked", CAN_BE_ANY_OF, ["yes", "no"], 0),
        Constraint("has_read_groups", CAN_BE_ANY_OF, ["yes", "no"], 0),
        
        Constraint("dict_added", MUST_BE, "yes", 1),
        Constraint("samtools_indexed", MUST_BE, "yes", 1),
        Consequence("caller", SET_TO, "platypus"),
        Consequence("vcf_recalibrated", SET_TO, "no"),
        Consequence("vartype", SET_TO, "snp"),
        help="Use GATK HaplotypeCaller to call variants."),

    ModuleNode(
        "call_variants_varscan",
        [PileupSummary, NGS.ReferenceGenome], VCFFolder,
        
        Constraint("contents", CAN_BE_ANY_OF, BDT.CONTENTS, 0),
        Consequence("contents", SAME_AS_CONSTRAINT),
        Constraint("vartype", CAN_BE_ANY_OF, ["all", "consensus"], 0),
        Consequence("vartype", SAME_AS_CONSTRAINT),
        Constraint("samtools_indexed", MUST_BE, "yes", 1),
        Consequence("caller", SET_TO, "varscan"),
        Consequence("vcf_recalibrated", SET_TO, "no"),
        help="Use Varscan to call variants."),

    ModuleNode(
        "make_vcf_recalibration_report_snp",
        [VCFFolder, NGS.ReferenceGenome], VCFRecalibrationReport,
        OptionDef("vcf_recal_dbsnp"),
        OptionDef("vcf_recal_mills_indels"),
        OptionDef("vcf_recal_1kg_indels"),
        OptionDef("vcf_recal_omni"),
        Constraint("vcf_recalibrated", MUST_BE, "no", 0),
        Constraint("vartype", CAN_BE_ANY_OF, ["all", "snp"], 0),
        Consequence("vartype", SET_TO, "snp"),
        Constraint("caller", CAN_BE_ANY_OF, CALLERS, 0),
        Consequence("caller", SAME_AS_CONSTRAINT),
        help="VariantRecalibrator",
        ),
    ModuleNode(
        "recalibrate_variants_snp",
        [VCFFolder, NGS.ReferenceGenome, VCFRecalibrationReport], VCFFolder,
        Constraint("vcf_recalibrated", MUST_BE, "no", 0),
        Consequence("vcf_recalibrated", SET_TO, "yes"),
        Constraint("caller", CAN_BE_ANY_OF, CALLERS, 0),
        Constraint("caller", SAME_AS, 0, 2),
        Consequence("caller", SAME_AS_CONSTRAINT),
        Constraint("vartype", CAN_BE_ANY_OF, ["all", "snp"], 0),
        Constraint("vartype", MUST_BE, "snp", 2),
        Consequence("vartype", SAME_AS_CONSTRAINT, 2),
        help="GATK ApplyRecalibration",
        ),
    
    ModuleNode(
        "filter_snps_only_multivcf",
        MultiVCFFile, MultiVCFFile,
        Constraint("vartype", MUST_BE, "all"),
        Consequence("vartype", SET_TO, "snp"),
        ),

    ModuleNode(
        "annotate_with_annovar",
        VCFFolder, AnnotatedVCFFolder,
        OptionDef("buildver", help="E.g. hg19.  See annovar docs."),
        ),

    ModuleNode(
        "merge_vcf_folder",
        VCFFolder, MultiVCFFile,
        Constraint("contents", CAN_BE_ANY_OF, BDT.CONTENTS),
        Consequence("contents", SAME_AS_CONSTRAINT),
        Constraint("caller", CAN_BE_ANY_OF, CALLERS),
        Consequence("caller", SAME_AS_CONSTRAINT),
        Constraint("vartype", CAN_BE_ANY_OF, VARTYPES),
        Consequence("vartype", SAME_AS_CONSTRAINT),
        Consequence("backfilled", SET_TO, "no"),
        ),
    
    ModuleNode(
        "annotate_multivcf_annovar",
        MultiVCFFile, AnnotatedMultiVCFFile,
        OptionDef("buildver", help="E.g. hg19.  See annovar docs."),
        ),
    
    ModuleNode(
        "extract_positions_from_multivcf_file",
        MultiVCFFile, PositionsFile,
        Constraint("backfilled", MUST_BE, "no"),
        Constraint("caller", CAN_BE_ANY_OF, CALLERS),
        Constraint("vartype", CAN_BE_ANY_OF, VARTYPES),
        Consequence("vartype", SAME_AS_CONSTRAINT),
        ),

    ModuleNode(
        "backfill_multivcf_file",
        [AnnotatedMultiVCFFile, MultiVCFFile],
        AnnotatedMultiVCFFile,
        DefaultAttributesFrom(0),
        Constraint("backfilled", MUST_BE, "no", 0),
        Consequence("backfilled", SET_TO, "yes"),
        Constraint("vartype", MUST_BE, "consensus", 1),
        Constraint("caller", MUST_BE, "varscan", 1),
        ),

    ]
