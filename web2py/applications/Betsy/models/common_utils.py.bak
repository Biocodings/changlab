# coding: utf8
import os
import subprocess
from Betsy import config
import shutil


output_path=config.OUTPUTPATH
Log_file = '/home/xchen/chencode/queue/log.txt'


def get_fullname_from_key(key):
    result_folders = os.listdir(output_path)
    for result_folder in result_folders:
        if key in result_folder:
            return result_folder
    return None
    
def hash_command(time, command_line):
    from hashlib import md5
    hashstring=time+command_line
    hash = md5()
    hash.update(hashstring)
    hash_result = hash.hexdigest()
    return hash_result
    
    
#def create_form(inputs,parameters):
#    inputs_copy = inputs[:]
#    inputs_copy.remove('gse_id')
#    inputs_copy.remove('gse_id_and_platform')
#    inputs_copy.append('')
#    fields = [Field('gse_id'),Field('gse_id_content'),Field('gse_id_and_platform'),Field('gse_id_and_platform_content')]
#    for i in range(4):
#        fields.append(Field('myfile'+str(i),requires=IS_IN_SET(inputs_copy)))
#        fields.append(Field('myfile'+str(i)+'_content'))
#        fields.append(Field('myfile'+str(i)+'_path','upload',
#        uploadfolder=upload_path))
#    for parameter in parameters:
#        if parameter.choices:
##            if parameter.default:
#                fields.append(Field(parameter.name,requires=IS_IN_SET(parameter.choices),default=parameter.default))
#            else:
#                add_parameters=parameter.choices+['']
#                fields.append(Field(parameter.name,requires=IS_IN_SET(add_parameters),default=''))
#        else:
#            if parameter.default:
#                fields.append(Field(parameter.name,default=parameter.default))
#            else:
#                fields.append(Field(parameter.name))
#    return fields
    
def create_form(inputs,parameters):
    inputs_copy = inputs[:]
    inputs_copy.append('')
    fields=[]
    for i in range(10):
        fields.append(Field('myfile'+str(i),requires=IS_IN_SET(inputs_copy)))
        fields.append(Field('myfile'+str(i)+'_content'))
        fields.append(Field('myfile'+str(i)+'_path','upload', uploadfolder=upload_path))
        fields.append(Field('myfile'+str(i)+'_id'))
    for parameter in parameters:
        if parameter.choices:
            if parameter.default:
                fields.append(Field(parameter.name,requires=IS_IN_SET(parameter.choices),default=parameter.default))
            else:
                add_parameters=parameter.choices+['']
                fields.append(Field(parameter.name,requires=IS_IN_SET(add_parameters),default=''))
        else:
            if parameter.default:
                fields.append(Field(parameter.name,default=parameter.default))
            else:
                fields.append(Field(parameter.name))
    return fields
    
    
#def create_command(form_value):    
#        keys = form_value.keys()
#        command_parameters = []
#        input_file = []
#        for key in keys:
#            if key.startswith('gse_id') and not key.endswith('_content') and form_value[key]:
#                if form_value[key+'_content']:
#                    input_file.extend(['--input',key+':'+ form_value[key+'_content'] + ':' + form_value[key]])
#                else:
#                    input_file.extend(['--input',key+':'+form_value[key]])
#            elif key.startswith('myfile'):
#                if not key.endswith('_path') and not key.endswith('_content') and form_value[key]:
#                    if form_value[key+'_content']:
#                        input_file.extend(['--input',form_value[key]+':'+ form_value[key+'_content'] + ':' + os.path.join(upload_path,form_value[key+'_path'])])
#                    else:
#                        input_file.extend(['--input',form_value[key]+':'+os.path.join(upload_path,form_value[key+'_path'])])
#            elif form_value[key] and not key.endswith('_content'):
#                command_parameters.extend(['--parameters', key+':'+form_value[key]])
#        return input_file,command_parameters
        
def create_command(form_value):    
        keys = form_value.keys()
        command_parameters = []
        input_file = []
        for key in keys:
            if form_value[key] and key.startswith('myfile'):
                if form_value[key+'_id']:
                    if form_value[key+'_content']:
                        input_file.extend(['--input',key+':'+ form_value[key+'_content'] + ':' + form_value[key+'_id']])
                    else:
                        input_file.extend(['--input',key+':'+form_value[key+'_id']])
                if form_value[key+'_path']:
                    if form_value[key+'_content']:
                        input_file.extend(['--input',form_value[key]+':'+ form_value[key+'_content'] + ':' + os.path.join(upload_path,form_value[key+'_path'])])
                    else:
                        input_file.extend(['--input',form_value[key]+':'+os.path.join(upload_path,form_value[key+'_path'])])
            elif form_value[key] and not key.startswith('myfile'):
                command_parameters.extend(['--parameters', key+':'+form_value[key]])
        return input_file,command_parameters
        
def get_protocol_info(label):
    from Betsy import protocol_utils
    module = protocol_utils.import_protocol(label)
    column_name = module.CATEGORIES
    vars()[label + '_parameters'] = module.PARAMETERS
    PARAMETERS_dict = dict()
    for parameter in module.PARAMETERS:
        PARAMETERS_dict[parameter.name]=parameter
    vars()[label + '_parameters_dict'] = PARAMETERS_dict
    vars()[label + '_inputs'] = module.INPUTS
    pretty_name = module.PRETTY_NAME
    return (vars()[label + '_parameters'],vars()[label + '_parameters_dict'],
            vars()[label + '_inputs'],column_name,pretty_name)

def convert_time2seconds(time):
    hour = int(time.split('h')[0])
    seconds = int(time.split('m')[-1][:-1])
    minutes = int(time.split('h')[-1].split('m')[0])
    result = hour*3600+minutes*60+seconds
    return result


def summarize_jobs(user,jobname):
    command = ['python','/home/xchen/chencode/Betsy/scripts/admin_utils.py','--list_all']
    process = subprocess.Popen(command, shell=False,
                               stdout=subprocess.PIPE,
                               stderr=subprocess.STDOUT)    
    process.wait()
    log_information = process.stdout.read().split('\n')[1:]
    disk_space=0
    total_time=0
    log_information = [i for i in log_information if i.strip()]
    for i in log_information:
        words = i.split('\t')
        if user== words[-2] and jobname == words[-1]:
            disk_space = disk_space + int(words[5])
            complete_time = convert_time2seconds(words[4])
            total_time=complete_time+total_time
    return disk_space,total_time


def delete_job_and_update(jobname):
    command = ['python','/home/xchen/chencode/Betsy/scripts/admin_utils.py','--list_all']
    process = subprocess.Popen(command, shell=False,
                               stdout=subprocess.PIPE,
                               stderr=subprocess.STDOUT)    
    process.wait()
    log_information = process.stdout.read().split('\n')[1:]
    log_information = [i for i in log_information if i.strip()]
    for i in log_information:
        words = i.split('\t')
        if  jobname == words[-1]:
            key=words[1]
            filename=get_fullname_from_key(key)
            if os.path.exists(os.path.join(output_path,filename)):
                shutil.rmtree(os.path.join(output_path,filename))
    #update the log file
    f=file(Log_file,'r')
    log_information = f.read().split('\n')
    log_information = [i for i in log_information if i.strip()]
    f.close()
    headlines=log_information[0]
    f=file(Log_file,'w')
    f.write(headlines+'\n')
    for i in log_information[1:]:
        words=i.split('\t')
        if words[1]!=jobname:
            f.write(i+'\n')
    f.close()
    #delete the row in database
    db(db.status.Jobname ==jobname).delete()
