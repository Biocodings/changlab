# coding: utf8
import os
def hash_command(time, command_line):
    from hashlib import md5
    hashstring=time+command_line
    hash = md5()
    hash.update(hashstring)
    hash_result = hash.hexdigest()
    return hash_result
    
    
def create_form(inputs,parameters,defaults):
    inputs_copy = inputs[:]
    inputs_copy.remove('gse_id')
    inputs_copy.remove('gse_id_and_platform')
    inputs_copy.append('')
    fields = [Field('gse_id'),Field('gse_id_content'),Field('gse_id_and_platform'),Field('gse_id_and_platform_content')]
    for i in range(4):
        fields.append(Field('myfile'+str(i),requires=IS_IN_SET(inputs_copy)))
        fields.append(Field('myfile'+str(i)+'_content'))
        fields.append(Field('myfile'+str(i)+'_path','upload',
        uploadfolder=upload_path))
    for key in parameters:
        if isinstance(parameters[key],list):
            if key in defaults:
                fields.append(Field(key,requires=IS_IN_SET(parameters[key]),default=defaults[key]))
            else: 
                add_parameters=parameters[key]+['']
                fields.append(Field(key,requires=IS_IN_SET(add_parameters),default=''))
        else:
            if key in defaults:
                fields.append(Field(key,default=defaults[key]))
            else:
                fields.append(Field(key))
    return fields
    
    
def create_command(form_value):    
        keys = form_value.keys()
        command_parameters = []
        input_file = []
        for key in keys:
            if key.startswith('gse_id') and not key.endswith('_content') and form_value[key]:
                if form_value[key+'_content']:
                    input_file.extend(['--input',key+':'+ form_value[key+'_content'] + ':' + form_value[key]])
                else:
                    input_file.extend(['--input',key+':'+form_value[key]])
            elif key.startswith('myfile'):
                if not key.endswith('_path') and not key.endswith('_content') and form_value[key]:
                    if form_value[key+'_content']:
                        input_file.extend(['--input',form_value[key]+':'+ form_value[key+'_content'] + ':' + os.path.join(upload_path,form_value[key+'_path'])])
                    else:
                        input_file.extend(['--input',form_value[key]+':'+os.path.join(upload_path,form_value[key+'_path'])])
            elif form_value[key] and not key.endswith('_content'):
                command_parameters.extend(['--parameters', key+':'+form_value[key]])
        return input_file,command_parameters
        

def get_protocol_info(label):
    from Betsy import protocol_utils
    module = protocol_utils.import_protocol(label)
    print label
    vars()[label + '_parameters'] = module.PARAMETERS
    vars()[label + '_inputs'] = module.INPUTS
    vars()[label + '_default'] = module.DEFAULT
    print module.predicate2arguments
    vars()[label + '_common'] = module.common_parameters
    vars()[label + '_normalize'] = module.normalize_parameters
    vars()[label + '_option'] = module.optional_parameters
    return (vars()[label + '_parameters'],vars()[label + '_inputs'],vars()[label + '_default'],
            vars()[label + '_common'],vars()[label + '_normalize'],vars()[label + '_option'])
