RUNNING BETSY
=============

The main interface to the BETSY expert system is through the
betsy_run.py script.  In this system, you specify the desired output
(e.g. a gene expression data set), and work with BETSY to refine the
pipeline until you come upon one that fits your needs.  Here is an
example interaction with the system to generate a clustered heatmap of
a gene expression data set.

1.  First, query the BETSY knowledge base for the DataTypes that can
be produced.

$ betsy_run.py

In the output, I see that the DataType for generating a heatmap is
called a "Heatmap".


2.  Ask BETSY to create a network that produces a Heatmap.

$ betsy_run.py --network_png network.png --output Heatmap





Some useful flags:
--num_cores <int>     Set the maximum number of cores to use.
--receipt <filename>  Save a record of the analysis run (as a text file).

BETSY is concurrency safe.  You can run multiple instances
simultaneously.  If two instances are operating on the same data, they
won't do the same calculations, and they won't overwrite each other's
results.

betsy_run.py -h will 




MANAGING CACHE
==============

When BETSY runs pipelines, it tries to avoiding repeating the same
calculation.  This enables the user to try multiple different
parameters without performing redundant calculations.  BETSY does this
by caching the results in the CACHE_PATH configured in ~/.betsyrc.
Because CACHE_PATH contains an archive of every result, it can grow
large.  Unfortunately, there is not yet an automated way of clearing
that cache, and it must be done manually using a script called
betsy_manage_cache.py

Here are some example uses of betsy_manage_cache.py.

betsy_manage_cache.py -h        Shows a help message.
betsy_manage_cache.py           Generates a summary of the analyses that are 
                                cached.
betsy_manage_cache.py --run     Show the analyses currently running.
betsy_manage_cache.py --broken  Show the broken analyses, e.g. those that 
                                quit before completion for some reason.

betsy_manage_cache.py --clear_cache 1T 
                                Clear out 1 terabyte of old (not currently 
                                running) analyses.
betsy_manage_cache.py --clear_cache 500g
                                Clear out 500 Gb of old analyses.
betsy_manage_cache.py --clear_cache 500g --dry_run
                                Do a dry run.  Just show the analyses that 
                                would be deleted without actually deleting
                                them.
                                                  



Preprocess Usage

1)Betsy can preprocess with rma or mas5 for Affymetrix cel data. 

	Examples:
	A. When given a GSE ID from the geo, and want to do rma preprocess, 
	   the command is

	python run_rule.py  \
      --input 'GEOSeries' \
      --mattr 'GSEID=GSE8286' \
      --output 'SignalFile' \
      --dattr 'SignalFile,preprocess=rma' \
      --dattr 'SignalFile,quantile_norm=yes' \
      --png_file 'out.png'
      ----------------------------------------------------------------
      B. When given a GSE ID and GPL platform number from the geo, 
	   and want to do rma preprocess, 
	   the command is 
     
      python run_rule.py  \
      --input 'GEOSeries' \
      --mattr 'GSEID=GSE17907' \
      --mattr 'GPLID=GPL570' \
      --output 'SignalFile' \
      --dattr 'SignalFile,preprocess=rma' \
      --dattr 'SignalFile,quantile_norm=yes' \
      --png_file 'out.png'
      ----------------------------------------------------------------
     C. When given a folder contains cel file, the command is

	python run_rule.py  \
      --input 'CELFiles' \
      --input_file '/home/xchen/chencode/betsy_test/GSE8286_folder' \
      --output 'SignalFile' \
      --dattr 'SignalFile,preprocess=rma' \
      --dattr 'SignalFile,quantile_norm=yes' \
      --png_file 'out.png'
-----------------------------------------------------------------------
2) Betsy can preprocess with illumina for illumina idat files.
     Example:
	When given a folder contains idat files, the command is
     python run_rule.py  \
     --input 'ExpressionFiles'  \
     --input_file '/home/xchen/chencode/betsy_test/6991010018' \
     --output 'SignalFile'  \
     --dattr 'SignalFile,preprocess=illumina' \
     --png_file 'out.png'
 ----------------------------------------------------------------
3) Betsy can preprocess with agilent for  Agilent files.
     Example:
	When given a folder contains agilent files, the command is
     python run_rule.py \
     --input 'ExpressionFiles' \
     --input_file '/home/xchen/chencode/betsy_test/agilent_expression' \
     --output 'SignalFile' \
     --dattr 'SignalFile,preprocess=agilent' \
     --png_file 'out.png'
 ----------------------------------------------------------------
4) Betsy can preprocess with gpr for gpr files.
     Example:
	When given a folder contains gpr files, the command is
     python run_rule.py \
     --input 'ExpressionFiles'  \
     --input_file '/home/xchen/chencode/betsy_test/GSE4189' \
     --output 'SignalFile' \
     --dattr 'SignalFile,preprocess=loess' \
     --png_file 'out.png'
 ----------------------------------------------------------------  
 (5) Betsy can download TCGA data and process it to a SignalFile
    Example:
   python run_rule.py \
   --input 'TCGAID'  \
   --mattr 'disease=BLCA' \
   --output 'SignalFile'  \
   --dattr 'SignalFile,preprocess=tcga' \
   --dattr 'TCGAFile,data=rppa' \
   --png_file 'out.png' 
----------------------------------------------------------------
(6) Betsy can preprocess RNA Seq with RSEM and convert into a SignalFile
 
    python run_rule.py \
   --input 'RNASeqFile' \
   --input_file '/home/xchen/NGS/try_RSEM/big_sample_data' \
   --output 'SignalFile' \
   --dattr SignalFile,preprocess=rsem \
   --dattr SamFolder,ref=human \
   --input SampleGroupFile \
   --input_file '/home/xchen/NGS/try_RSEM/big_sample_data/sample_group.txt' \
   --png_file 'out.png'
=============================================================================
Process Usage

Betsy can do predataset,log,unlog,gene_filter,quantile,combat, shiftscale,dwd,bfrm, predataset,gene_center,gene_normalize,gene_order, annotate, rename_sample, platform,
num_features,unique_genes, duplicate_probe,group_fc,change format,for signal files

The option of the attributes are:
    preprocess:   unknown, illumina, agilent, mas5, rma, loess
    missing_algorithm: none, median_fill, zero_fill         
    filter:no, yes 
    dwd_norm: no, yes
    bfrm_norm: no, yes
    quantile_norm: no, yes
    shiftscale_norm: no, yes
    combat_norm: no", yes
    predataset: no, yes
    gene_center: no, mean, median
    gene_normalize:  no, variance, sum_of_squares
    gene_order:no, class_neighbors, gene_list, t_test_p, t_test_fdr
    annotate: no,yes
    rename_sample: no, yes
    platform: yes,no
    num_features: yes,no
    unique_genes: no, average_genes, high_var, first_gene,
    duplicate_probe:no, closest_probe, high_var_probe    
    group_fc: yes,no
    contents:unspecified, train0, train1, test, class0,class1,test,
        class0, class1, class0,class1,      
    logged: no, yes
    format: tdf, gct

 ----------------------------------------------------------------
    Example:
    When given a SignalFile,do predataset, quantile, gene_center=mean,gene_normalize=variance.
    The command is
    python run_rule.py \
    --input '_SignalFile_Postprocess' \
    --input_file '/home/xchen/chencode/betsy_test/all_aml_train_missed.gct' \
    --output 'SignalFile' \
    --dattr 'SignalFile,predataset=yes' \
    --dattr 'SignalFile,quantile_norm=yes' \
    --dattr 'SignalFile,gene_center=mean' \
    --dattr 'SignalFile,gene_normalize=variance'
 ----------------------------------------------------------------
    When given a SignalFile and ClassLabelFile, group_fc=yes and group_fc_num=1
    The command is:
	python run_rule.py \
	--input '_SignalFile_Postprocess' \
	--input_file '/home/xchen/chencode/betsy_test/all_aml_train_filt.res' \
	--input 'ClassLabelFile' \
	--dattr 'cls_format=cls' \
	--input_file '/home/xchen/chencode/betsy_test/all_aml_train.cls' \
	--output 'SignalFile' \
	--dattr 'SignalFile,group_fc=yes' \
	--mattr 'group_fc_num=1' \
	--png_file 'out.png'
=============================================================================
Heatmap Usage

Betsy can make heatmap for a SignalFile without clustering.
    Example:
    When given a signal_file, plot the heatmap and set the heatmap size as x=20,y=20.
    The command is:
	python run_rule.py \
	--input '_SignalFile_Postprocess' \
	--input_file '/home/xchen/chencode/betsy_test/breast_19.mas5'  \
	--output 'Heatmap'   \
     --mattr 'hm_width=20' \
     --mattr 'hm_height=20' \
     --png_file 'out.png'

   
    The result folder will contain a png file showing the heatmap.
=============================================================================
Clustering Usage

Betsy can do clustering for a SignalFile and plot the heatmap.

    Example:
    When given a signalFile, gene_center=mean, gene_normalize=variance, 
    cluster the genes by hierarchical method and plot the heatmap, 
    set the heatmap size as x=200,y=1.
    The command is:
	python run_rule.py \
	--input '_SignalFile_Postprocess'  \
	--input_file '/home/xchen/chencode/betsy_test/breast_19.mas5'  \
	--output 'ClusterReportFile'   \
     --dattr 'SignalFile,gene_normalize=variance' \
     --dattr 'SignalFile,gene_center=mean' \
	--dattr 'ClusterFile,cluster_alg=pca' \
	--dattr 'ClusterFile,distance=correlation' \
     --mattr 'hm_width=200' \
     --mattr 'hm_height=20' \
	--png_file 'out.png'

The result folder will contain a clustering file and a png file showing the heatmap.
===============================================================================
Classification Usage

Betsy can do classification with svm and weighted_voting method for dataset. 
Also it can leave one out cross validation by these two methods.
The command is:
	python run_rule.py \
	--input '_SignalFile_Postprocess' \
	--dattr 'contents=class0,class1' \
	--input_file '/home/xchen/chencode/betsy_test/all_aml_train.res' \
	--input '_SignalFile_Postprocess' \
	--dattr 'contents=test' \
	--input_file '/home/xchen/chencode/betsy_test/all_aml_test.res' \
	--input 'ClassLabelFile' \
	--dattr 'contents=class0,class1' \
	--dattr 'cls_format=cls' \
	--input_file '/home/xchen/chencode/betsy_test/all_aml_train.cls' \
	--input 'ClassLabelFile' \
	--dattr 'contents=test' \
	--dattr 'cls_format=cls' \
	--input_file '/home/xchen/chencode/betsy_test/all_aml_test.cls' \
	--output 'ClassifyReportFile' \
	--png_file 'out.png' \
	--text_file 'out.txt' 

===============================================================================
Differential expressed genes analysis usage

Betsy can do the differential expressed genes analysis for signal_files.
The command is:
	python run_rule.py \
	--input '_SignalFile_Postprocess'  \
	--input_file '/home/xchen/chencode/betsy_test/all_aml_train_filt.res' \
	--input 'ClassLabelFile' \
	--dattr 'cls_format=cls' \
	--input_file '/home/xchen/chencode/betsy_test/all_aml_train.cls' \
	--output 'DiffReportFile'  \
	--png_file 'out.png'
===============================================================================
Geneset Analysis Usage 

Example:
When given a signal_file and a gene set file, try do geneset score analysis and plot the result.

	python run_rule.py \
	--output 'GenesetReportFile' \
	--dattr 'SignalFile,quantile_norm=yes' \
	--dattr 'SignalFile,gene_center=mean' \
        --dattr 'SignalFile,gene_normalize=variance' \
	--dattr 'SignalFile,unique_genes=high_var' \
	--dattr 'SignalFile,annotate=yes'  \
	--input '_SignalFile_Postprocess'  \
	--input_file '/home/xchen/chencode/betsy_test/se2fplate6_48.illu.gz' \
	--input 'GenesetFile' \
	--input_file '/home/xchen/chencode/betsy_test/genesets.gmt' \
	--mattr 'geneset_value=E2F1n_affy_150_UP' \
	--png_file 'out.png'
===============================================================================
Normalization Usage

Example:
When given a signal_file, try do quantile_norm and gene_center=median,get a normalization report

	python run_rule.py \
	--input '_SignalFile_Postprocess'  \
	--input_file '/home/xchen/chencode/betsy_test/all_aml_train_filt.res' \
	--output 'NormalizeReportFile'  \
	--dattr 'SignalFile,quantile_norm=yes'  \
	--dattr 'SignalFile,preprocess=unknown' \
	--dattr 'SignalFile,gene_center=median' \
	--png_file 'out.png' \
      --json_file 'outjson.txt'
--------------------------------------------------
	When given a ExpressionFiles, try rma preprocess, do quantile_norm and gene_center=median,get a NormalizeReportFile report

	python run_rule.py \
	--input 'ExpressionFiles'  \
	--input_file '/home/xchen/chencode/betsy_test/GSE8286_folder' \
	--output 'NormalizeReportFile'  \
	--dattr 'SignalFile,quantile_norm=yes'  \
	--dattr 'NormalizeReportFile,preprocess=rma' \
	--dattr 'SignalFile,gene_center=median' \
	--png_file 'out.png'
--------------------------------------------------
	When given a ExpressionFiles, try illumina preprocess, do quantile_norm and gene_center=median,get a NormalizeReportFile report

	python run_rule.py \
	--input 'ExpressionFiles'  \
	--input_file '/home/xchen/chencode/betsy_test/6991010018' \
	--output 'NormalizeReportFile'  \
	--dattr 'SignalFile,quantile_norm=yes'  \
	--dattr 'NormalizeReportFile,preprocess=illumina' \
	--dattr 'SignalFile,gene_center=median' \
	--png_file 'out.png'
==============================================================================
DNA NGS Usage

When given a DNA fa file, require a vcf file.
	python run_rule.py \
	--output VcfFile \
	--dattr  VcfFile,vcf_filter=yes \
	--input FastqFile --input_file /data/xchen/human/human1_cut.fa \
	--png_file out.png
==============================================================================
Clinical outcomes Usage

Given an expression file and clinical file, doing clinical outcome analysis.
	python run_rule.py \
	--input _SignalFile_Postprocess \
	--input_file  /home/xchen/chencode/examples/survial_analysis/GSE17907.rma.gz \
	--input ClinicalFile \
	--input_file /home/xchen/chencode/examples/survial_analysis/GSE17907.stdclin \
	--mattr outcome=DMFS \
	--mattr dead=DMFS_DEAD \
	--mattr genename=117_at,1007_s_at \
	--output ClinicalAnalysis   \
	--png_file out.png --text_file 1.txt
==============================================================================
EMT analysis Usage

Given an expression file and a cellType File, do EMT analysis on some genesets.

python run_rule.py \
	--input _SignalFile_Postprocess  \
	--input_file /data/genomidata/stem_cell/EMT.cent.rma.gz \
	--input CellTypeFile \
	--input_file /data/genomidata/stem_cell/EMT.stdclin  \
	--output EMTAnalysis \
	--png_file 'out.png' \
	--mattr 'geneset_value=CDH1,CDH2,VIM,ABCA1' \
	--output_file 'text0'
==============================================================================
Pathway Signature Score Usage

	python run_rule.py \
	--input 'ExpressionFiles' \
	--input_file '/home/xchen/chencode/betsy_test/GSE8286_folder' \
	--output 'SignatureScore'  \
	--mattr 'platform_name=HG_U133A' \
	--png_file 'out.png' --text_file 'out.txt' 
==============================================================================
Batch effect remove usage

Betsy can do the batch effect remove analysis for signal_files.
The command is:
	python run_rule.py \
	--input '_SignalFile_Postprocess'  \
	--input_file '/home/xchen/chencode/betsy_test/all_aml_train_filt.res' \
	--input 'ClassLabelFile' \
	--dattr 'cls_format=cls' \
	--input_file '/home/xchen/chencode/betsy_test/all_aml_train.cls' \
	--output 'BatchEffectReportFile'  \
	--png_file 'out.png'
